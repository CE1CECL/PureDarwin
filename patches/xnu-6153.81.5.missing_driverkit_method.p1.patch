commit bdddf7b9b2cd0ca21d52c767cc7b16252d3c18b7
Author: William Kent <wjk011@gmail.com>
Date:   Sun Jul 19 14:44:46 2020 -0400

    Apply missing_driverkit_method patch

diff --git a/iokit/DriverKit/OSAction.iig b/iokit/DriverKit/OSAction.iig
index 999205c..cc1746f 100644
--- a/iokit/DriverKit/OSAction.iig
+++ b/iokit/DriverKit/OSAction.iig
@@ -73,6 +73,16 @@ public:
 		size_t          referenceSize,
 		OSAction     ** action) LOCAL;
 
+	static kern_return_t
+	CreateWithTypeName(
+		OSObject *target,
+		uint64_t targetmsgid,
+		uint64_t msgid,
+		size_t referenceSize,
+		OSString *typeName,
+		OSAction **action
+	) LOCAL;
+
 	virtual void
 	free() override;
 
diff --git a/iokit/Kernel/IOUserServer.cpp b/iokit/Kernel/IOUserServer.cpp
index 3ca154c..65079a1 100644
--- a/iokit/Kernel/IOUserServer.cpp
+++ b/iokit/Kernel/IOUserServer.cpp
@@ -518,6 +518,48 @@ IMPL(OSAction, Create)
 	return kIOReturnSuccess;
 }
 
+kern_return_t
+OSAction::CreateWithTypeName(OSAction_CreateWithTypeName_Args)
+{
+	return OSAction::CreateWithTypeName_Call(target, targetmsgid, msgid, referenceSize, typeName, action);
+}
+
+kern_return_t
+IMPL(OSAction, CreateWithTypeName)
+{
+	OSAction * inst;
+	vm_size_t  allocsize;
+
+	if (os_add_overflow(referenceSize, sizeof(OSAction_IVars), &allocsize)) {
+		return kIOReturnBadArgument;
+	}
+
+	OSSymbolConstPtr symbol = OSSymbol::withString(typeName);
+	const OSMetaClass *klass = OSMetaClass::getMetaClassWithName(symbol);
+	symbol->release();
+	if (klass == NULL) {
+		return kIOReturnBadArgument;
+	}
+	inst = (OSAction *)klass->alloc();
+	if (!inst) {
+		return kIOReturnNoMemory;
+	}
+	inst->ivars = (typeof(inst->ivars))(uintptr_t) IONewZero(uint8_t, allocsize);
+	if (!inst->ivars) {
+		inst->release();
+		return kIOReturnNoMemory;
+	}
+	target->retain();
+	inst->ivars->target        = target;
+	inst->ivars->targetmsgid   = targetmsgid;
+	inst->ivars->msgid         = msgid;
+	inst->ivars->referenceSize = referenceSize;
+
+	*action = inst;
+
+	return kIOReturnSuccess;
+}
+
 void
 OSAction::free()
 {
