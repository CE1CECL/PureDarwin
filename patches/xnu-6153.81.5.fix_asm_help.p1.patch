commit dd03d10dfc0e94b39594bd40e5283cf464f8f152
Author: William Kent <wjk011@gmail.com>
Date:   Wed Apr 29 16:20:45 2020 -0400

    Apply patch fix_asm_help

diff --git a/EXTERNAL_HEADERS/architecture/i386/asm_help.h b/EXTERNAL_HEADERS/architecture/i386/asm_help.h
index ec278d5..d4c30ba 100644
--- a/EXTERNAL_HEADERS/architecture/i386/asm_help.h
+++ b/EXTERNAL_HEADERS/architecture/i386/asm_help.h
@@ -2,7 +2,7 @@
  * Copyright (c) 2000 Apple Computer, Inc. All rights reserved.
  *
  * @APPLE_OSREFERENCE_LICENSE_HEADER_START@
- * 
+ *
  * This file contains Original Code and/or Modifications of Original Code
  * as defined in and that are subject to the Apple Public Source License
  * Version 2.0 (the 'License'). You may not use this file except in
@@ -11,10 +11,10 @@
  * unlawful or unlicensed copies of an Apple operating system, or to
  * circumvent, violate, or enable the circumvention or violation of, any
  * terms of an Apple operating system software license agreement.
- * 
+ *
  * Please obtain a copy of the License at
  * http://www.opensource.apple.com/apsl/ and read it before using this file.
- * 
+ *
  * The Original Code and all software distributed under the License are
  * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
  * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
@@ -22,7 +22,7 @@
  * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
  * Please see the License for the specific language governing rights and
  * limitations under the License.
- * 
+ *
  * @APPLE_OSREFERENCE_LICENSE_HEADER_END@
  */
 /* Copyright (c) 1991 NeXT Computer, Inc.  All rights reserved.
@@ -62,14 +62,14 @@
 
 #ifdef notdef
 #define CALL_MCOUNT						\
-	pushl	%ebp						;\
-	movl	%esp, %ebp					;\
+	pushq	%rbp						;\
+	movq	%rsp, %rbp					;\
 	.data							;\
 	1: .long 0						;\
 	.text							;\
-	lea 9b,%edx						;\
+	leaq 9b,%rdx						;\
 	call mcount						;\
-	popl	%ebp						;
+	popq	%rbp						;
 #else
 #define CALL_MCOUNT
 #endif
@@ -83,13 +83,13 @@
 	.set	__nested_function, 1				;\
 	CALL_MCOUNT						\
 	.if __framesize						;\
-	  pushl	%ebp						;\
-	  movl	%esp, %ebp					;\
-	  subl	$__framesize, %esp				;\
+	  pushq	%rbp						;\
+	  movq	%rsp, %rbp					;\
+	  subq	$__framesize, %rsp				;\
 	.endif							;\
-	pushl	%edi						;\
-	pushl	%esi						;\
-	pushl	%ebx
+	pushq	%rdi						;\
+	pushq	%rsi						;\
+	pushq	%rbx
 
 /*
  * Prologue for functions that do not call other functions.  Does not
@@ -101,9 +101,9 @@
 	.set	__nested_function, 0				;\
 	CALL_MCOUNT						\
 	.if __framesize						;\
-	  pushl	%ebp						;\
-	  movl	%esp, %ebp					;\
-	  subl	$__framesize, %esp				;\
+	  pushq	%rbp						;\
+	  movq	%rsp, %rbp					;\
+	  subq	$__framesize, %rsp				;\
 	.endif
 
 /*
@@ -114,13 +114,13 @@
  */
 #define FUNCTION_EPILOGUE					\
 	.if __nested_function					;\
-	  popl	%ebx						;\
-	  popl	%esi						;\
-	  popl	%edi						;\
+	  popq	%rbx						;\
+	  popq	%rsi						;\
+	  popq	%rdi						;\
 	.endif							;\
 	.if __framesize						;\
-	  movl	%ebp, %esp					;\
-	  popl	%ebp						;\
+	  movq	%rbp, %rsp					;\
+	  popq	%rbp						;\
 	.endif							;\
 	ret
 
@@ -269,21 +269,14 @@ name:
 
 #if defined(__DYNAMIC__)
 #define PICIFY(var)					\
-	call	1f					; \
-1:							; \
-	popl	%edx					; \
-	movl	L ## var ## $non_lazy_ptr-1b(%edx),%edx
+	movq	var(%rip),%rdx
 
 #define CALL_EXTERN_AGAIN(func)	\
 	PICIFY(func)		; \
-	call	%edx
+	callq	*%rdx
 
-#define NON_LAZY_STUB(var)	\
-.non_lazy_symbol_pointer	; \
-L ## var ## $non_lazy_ptr:	; \
-.indirect_symbol var		; \
-.long 0				; \
-.text
+/* If these exist on x86_64, the linker will assert. */
+#define NON_LAZY_STUB(var)
 
 #define CALL_EXTERN(func)	\
 	CALL_EXTERN_AGAIN(func)	; \
@@ -291,25 +284,25 @@ L ## var ## $non_lazy_ptr:	; \
 
 #define BRANCH_EXTERN(func)	\
 	PICIFY(func)		; \
-	jmp	%edx		; \
+	jmp	*%rdx		; \
 	NON_LAZY_STUB(func)
 
 #define PUSH_EXTERN(var)	\
 	PICIFY(var)		; \
-	movl	(%edx),%edx	; \
-	pushl	%edx		; \
+	movq	(%rdx),%rdx	; \
+	pushq	%rdx		; \
 	NON_LAZY_STUB(var)
 
 #define REG_TO_EXTERN(reg, var)	\
 	PICIFY(var)		; \
-	movl	reg, (%edx)	; \
+	movq	reg, (%rdx)	; \
 	NON_LAZY_STUB(var)
 
 #define EXTERN_TO_REG(var, reg)				\
 	call	1f					; \
 1:							; \
-	popl	%edx					; \
-	movl	L ## var ##$non_lazy_ptr-1b(%edx),reg	; \
+	popq	%rdx					; \
+	movq	L##var##$non_lazy_ptr-1b(%rdx),reg	; \
 	NON_LAZY_STUB(var)
 
 
