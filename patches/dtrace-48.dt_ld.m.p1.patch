--- dtrace-48/libdtrace/dt_ld.m.origin	2008-11-09 18:27:35.000000000 +0100
+++ dtrace-48/libdtrace/dt_ld.m	2008-11-09 18:27:22.000000000 +0100
@@ -1,4 +1,5 @@
-#import <Foundation/Foundation.h>
+// Foundation is disabled because it doesn't belong to Darwin and is a blocker for PureDarwin
+//#import <Foundation/Foundation.h>
 // This must be done *after* any references to Foundation.h!
 #define uint_t  __Solaris_uint_t
 
@@ -48,13 +49,24 @@
 	return results;
 }
 
-static NSString* dt_ld_encode_nsstring(NSString* string)
+//static NSString* dt_ld_encode_nsstring(NSString* string)
+static char* dt_ld_encode_nsstring(char* string)
 {
-	char* results = dt_ld_encode_string((char*)[string UTF8String]);
+	/*char* results = dt_ld_encode_string((char*)[string UTF8String]);
 	NSString* value = [NSString stringWithUTF8String:results];
 	free(results);
 	
-	return value;
+	return value;*/
+	size_t input_length = strlen(string);
+	char* results = malloc(input_length * 2 + 1);
+	int i;
+	for (i=0; i<input_length; i++) {
+		sprintf(&results[i*2],"%02x", (unsigned int)string[i]);
+	}
+	results[input_length*2] = 0;
+	
+	return results;
+	
 }
 
 static char* dt_ld_decode_string(char* string)
@@ -72,13 +84,26 @@
 	return (char*)results;
 }
 
-static NSString* dt_ld_decode_nsstring(NSString* string)
+//static NSString* dt_ld_decode_nsstring(NSString* string)
+static char* dt_ld_decode_nsstring(char* string)
 {
-	char* results = dt_ld_decode_string((char*)[string UTF8String]);
+	/*char* results = dt_ld_decode_string((char*)[string UTF8String]);
 	NSString* value = [NSString stringWithUTF8String:results];
 	free(results);
 	
-	return value;
+	return value;*/
+	size_t input_length = strlen(string) / 2;
+	unsigned char* results = malloc(input_length + 1);
+	int i;
+	for (i=0; i<input_length; i++) {
+		unsigned int value;
+		sscanf(&string[i*2],"%2x", &value);
+		results[i] = (unsigned char)value;
+	}
+	results[input_length] = 0;
+	
+	return (char*)results;
+
 }
 
 #pragma mark -
@@ -155,9 +180,10 @@
 	};	
 }
 
-NSString* dt_ld_decode_stability_v1(NSArray* elements)
+//NSString* dt_ld_decode_stability_v1(NSArray* elements)
+char* dt_ld_decode_stability_v1(void* elements)
 {
-	NSString* provider = [elements objectAtIndex:1];
+	/*NSString* provider = [elements objectAtIndex:1];
 	NSScanner* scanner = [NSScanner scannerWithString:[elements objectAtIndex:3]];
 	[scanner setCharactersToBeSkipped:[NSCharacterSet characterSetWithCharactersInString:@"_"]];
 	NSMutableString* stability = [NSMutableString string];
@@ -188,12 +214,14 @@
 	class = dt_ld_decode_stability_v1_class([scanner scanInt:&value] == YES ? value : 255);
 	[stability appendFormat:@"#pragma D attributes %s/%s/%s provider %@ args\n", name, data, class, provider];
 	
-	return stability;
+	return stability;*/
+	return "";
 }
 
-NSString* dt_ld_decode_stability(NSString* encoding)
+//NSString* dt_ld_decode_stability(NSString* encoding)
+char* dt_ld_decode_stability(char* encoding)
 {
-	NSArray* elements = [encoding componentsSeparatedByString:@dtrace_separator];
+	/*NSArray* elements = [encoding componentsSeparatedByString:@dtrace_separator];
 	
 	NSString* version = [elements objectAtIndex:2];
 	
@@ -201,7 +229,8 @@
 		return dt_ld_decode_stability_v1(elements);
 	
 	// Wow, no good way to handle error conditions here.
-	return [NSString stringWithFormat:@"Unhandled stability encoding version %@", version];		
+	return [NSString stringWithFormat:@"Unhandled stability encoding version %@", version];	*/	
+	return "";
 }
 
 #pragma mark -
@@ -235,7 +264,7 @@
 
 static int dt_ld_probe_encode_typedef_iter(dt_idhash_t *dhp, dt_ident_t *idp, void *data)
 {
-	NSMutableDictionary* types = data;
+	//NSMutableDictionary* types = data;
 	dt_probe_t *probe = idp->di_data;
 	dt_node_t* node;
 	for (node = probe->pr_nargs; node != NULL; node = node->dn_list) {		
@@ -245,10 +274,10 @@
 			ssize_t size = ctf_type_lname(node->dn_ctfp, stripped_of_pointers, NULL, 0) + 1;
 			char* buf = alloca(size);
 			ctf_type_lname(node->dn_ctfp, stripped_of_pointers, buf, size);
-			NSString* typeKey = [NSString stringWithUTF8String:buf];
+			/*NSString* typeKey = [NSString stringWithUTF8String:buf];
 			if ([types objectForKey:typeKey] == nil) {
 				[types setObject:dt_ld_encode_nsstring(typeKey) forKey:typeKey];
-			}
+			}*/
 		}
 	}
 	
@@ -257,7 +286,7 @@
 
 char* dt_ld_encode_typedefs(char* provider_name, dt_provider_t *provider)
 {
-	NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
+	/*NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
 	NSMutableDictionary* types = [NSMutableDictionary dictionary];
 	
 	dt_idhash_iter(provider->pv_probes, dt_ld_probe_encode_typedef_iter, types);
@@ -281,24 +310,28 @@
 	
 	[pool drain];
 	
-	return value;
+	return value;*/
+	return "";
 }
 
-NSString* dt_ld_decode_typedefs_v1(NSArray* typedefs)
+//NSString* dt_ld_decode_typedefs_v1(NSArray* typedefs)
+char* dt_ld_decode_typedefs_v1(void* typedefs)
 {
-	NSMutableString* decoded = [NSMutableString string];
+	/*NSMutableString* decoded = [NSMutableString string];
 	
 	NSUInteger i, count = [typedefs count];
 	for (i=3; i<count; i++) {
 		[decoded appendFormat:@"typedef int %@;\n", dt_ld_decode_nsstring([typedefs objectAtIndex:i])];
 	}
 	
-	return decoded;
+	return decoded;*/
+	return "";
 }
 
-NSString* dt_ld_decode_typedefs(NSString* encoding)
+//NSString* dt_ld_decode_typedefs(NSString* encoding)
+char* dt_ld_decode_typedefs(char* encoding)
 {
-	NSArray* elements = [encoding componentsSeparatedByString:@dtrace_separator];
+	/*NSArray* elements = [encoding componentsSeparatedByString:@dtrace_separator];
 	
 	// Is anything actually encoded?
 	if ([elements count] > 3) {
@@ -310,9 +343,9 @@
 			// Wow, no good way to handle error conditions here.
 			return [NSString stringWithFormat:@"Unhandled typedefs encoding version %@", version];
 		}
-	}
+	}*/
 	
-	return @"";
+	return "";
 }
 
 #pragma mark -
@@ -320,7 +353,7 @@
 
 char* dt_ld_encode_probe(char* provider_name, char* probe_name, dt_probe_t* probe)
 {
-	NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
+	/*NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
 	
 	NSMutableString* string = [NSMutableString stringWithFormat:@"%s%s%s%s%s%s%s",
 				   dtrace_probe_encoding_prefix,
@@ -347,12 +380,14 @@
 	
 	[pool drain];
 	
-	return value;	
+	return value;*/
+	return "";
 }
 
-NSString* dt_ld_decode_probe_v1(NSArray* arguments)
+//NSString* dt_ld_decode_probe_v1(NSArray* arguments)
+char* dt_ld_decode_probe_v1(void* arguments)
 {
-	NSMutableString* decoded = [NSMutableString string];
+	/*NSMutableString* decoded = [NSMutableString string];
 	
 	NSUInteger i, count = [arguments count];
 	for (i=4; i<count; i++) {
@@ -362,12 +397,14 @@
 			[decoded appendFormat:@"%@", dt_ld_decode_nsstring([arguments objectAtIndex:i])];
 	}
 	
-	return decoded;	
+	return decoded;	*/
+	return "";
 }
 
-NSString* dt_ld_decode_probe(NSString* encoding)
+//NSString* dt_ld_decode_probe(NSString* encoding)
+char* dt_ld_decode_probe(char* encoding)
 {
-	NSArray* elements = [encoding componentsSeparatedByString:@dtrace_separator];
+	/*NSArray* elements = [encoding componentsSeparatedByString:@dtrace_separator];
 	
 	NSMutableString* probe = [NSMutableString stringWithFormat:@"\tprobe %@(", [elements objectAtIndex:2]];
 	
@@ -384,7 +421,8 @@
 	
 	[probe appendFormat:@");"];
 	
-	return probe;
+	return probe;*/
+	return "";
 }
 
 
@@ -418,9 +456,10 @@
 #pragma mark -
 #pragma mark D Script regeneration
 
-NSString* dt_ld_decode_script(NSString* stability, NSString* typedefs, NSArray* probes)
+//NSString* dt_ld_decode_script(NSString* stability, NSString* typedefs, NSArray* probes)
+void* dt_ld_decode_script(char* stability, char* typedefs, void* probes)
 {
-	NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
+	/*NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
 	
 	NSString* decodedTypedefs = dt_ld_decode_typedefs(typedefs);
 	
@@ -453,7 +492,7 @@
 	
 	[pool drain];
 	
-	return [script autorelease];
+	return [script autorelease];*/
 }
 
 #pragma mark -
@@ -608,7 +647,7 @@
 			   uint64_t offsetsInDOF[],    // [allocated by linker, populated by DTrace] per-probe offset in the DOF
 			   size_t* size)               // [allocated by linker, populated by DTrace] size of the DOF)
 {
-	NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
+	//NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
 	
 	int i, err;
 	const char* stability = NULL;
@@ -647,9 +686,9 @@
 	}
 	
 	// Recreate the provider.d script
-	NSMutableArray* probes = [NSMutableArray arrayWithCapacity:probeCount];
+	//NSMutableArray* probes = [NSMutableArray arrayWithCapacity:probeCount];
 	int is_enabled_probes = 0;
-	for (i=0; i<probeCount; i++) {
+	/*for (i=0; i<probeCount; i++) {
 		if (strncmp(probeNames[i], dtrace_probe_decoding_prefix, sizeof(dtrace_probe_decoding_prefix)-1) == 0) {
 			// Assert this belongs to the correct provider!
 			[probes addObject:[NSString stringWithUTF8String:probeNames[i]]];
@@ -669,7 +708,7 @@
 	
 	NSString* dscript = dt_ld_decode_script([NSString stringWithUTF8String:stability],
 						[NSString stringWithUTF8String:typedefs],
-						probes);	
+						probes);	*/
 	
 	dtrace_hdl_t* dtp = dtrace_open(DTRACE_VERSION, 
 	                                linker_flags(cpu), 
@@ -682,7 +721,7 @@
 	
 	set_options(dtp);
 	
-	dtrace_prog_t* program = dtrace_program_strcompile(dtp, 
+	/*dtrace_prog_t* program = dtrace_program_strcompile(dtp, 
 							   [dscript UTF8String],
 							   DTRACE_PROBESPEC_NONE,
 							   0,
@@ -693,13 +732,13 @@
 		fprintf(stderr, "error: Could not compile reconstructed dtrace script:\n\n%s\n", [dscript UTF8String]);
 		return NULL;
 	}
-	
+	*/
 	if(register_probes(dtp, probeCount, probeNames, probeWithin)) {
 		fprintf(stderr, "error: Could not register probes\n");
 		return NULL;
 	}
 		
-	dof_hdr_t* dof = dtrace_dof_create(dtp, program, DTRACE_D_PROBES);
+	/*dof_hdr_t* dof = dtrace_dof_create(dtp, program, DTRACE_D_PROBES);
 	
 	if(register_offsets(dof, probeCount, offsetsInDOF)) {
 		fprintf(stderr, "error: Could not register DOF offsets\n");
@@ -719,5 +758,6 @@
 	
 	[pool drain];
 	
-	return return_data;
+	return return_data;*/
+
 }
