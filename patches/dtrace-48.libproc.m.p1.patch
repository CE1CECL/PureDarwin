--- dtrace-48/libproc/libproc.m.origin	2008-11-09 18:09:08.000000000 +0100
+++ dtrace-48/libproc/libproc.m	2008-11-09 18:09:03.000000000 +0100
@@ -7,8 +7,10 @@
 //  Copyright 2006 Apple Computer, Inc. All rights reserved.
 //
 
-#import <Symbolication/Symbolication.h>
-#import <Symbolication/SymbolicationPrivate.h>
+// Symbolication is disabled because it doesn't belong to Darwin and is a blocker for PureDarwin
+//#import <Symbolication/Symbolication.h>
+//#import <Symbolication/SymbolicationPrivate.h>
+#import <objc/objc.h>
 
 #import <mach/mach.h>
 #include <mach/mach_error.h>
@@ -46,7 +48,7 @@
  * of Symbolication.framework, and can easily break.
  */
 
-@interface VMUSymbolicator (ViolationOfGoodSenseAndEncapsulation)
+/*@interface VMUSymbolicator (ViolationOfGoodSenseAndEncapsulation)
 
 // Copied from VMUSymbolicator (Internal)
 - (VMUSymbolOwner*)faultLazySymbolOwnerAtIndex:(NSInteger)index;
@@ -88,7 +90,7 @@
 	return owners;
 }
 
-@end
+@end*/
 
 /*
  * This is a helper method, it does extended lookups following roughly these rules
@@ -100,7 +102,7 @@
  *
  * You must have an autorelease pool when calling this method.
  */
-VMUSymbolOwner* symbolOwnerForName(VMUSymbolicator* symbolicator, NSString* name) {        
+/*VMUSymbolOwner* symbolOwnerForName(VMUSymbolicator* symbolicator, NSString* name) {        
         // Check for a.out specifically
         if ([name isEqualToString:@"a.out"]) {
                 NSArray* owners = [symbolicator symbolOwnersWithFlags:VMUSymbolOwnerIsAOut];
@@ -133,7 +135,7 @@
 	}
         
         return nil;
-}
+}*/
 
 #define APPLE_PCREATE_BAD_SYMBOLICATOR 0x0F000001
 
@@ -146,7 +148,7 @@
 {		
 	struct ps_prochandle* proc = NULL;
 	
-	NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
+	/*NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
 	
 	@try {
 		int pid;
@@ -163,7 +165,7 @@
 		
 		*perr = posix_spawnp(&pid, file, NULL, &attr, argv, *_NSGetEnviron());
 
-		unsetenv("DYLD_INSERT_LIBRARIES"); /* children must not have this present in their env */
+		unsetenv("DYLD_INSERT_LIBRARIES"); // children must not have this present in their env
 
 destroy_attr:
 		posix_spawnattr_destroy(&attr);
@@ -203,7 +205,7 @@
 		}
 	}
 	
-	[pool drain];
+	[pool drain];*/
 	
 	return proc;
 }
@@ -280,7 +282,7 @@
         struct ps_prochandle* proc = NULL;
                 
         if (flags & PGRAB_RDONLY || (0 == flags)) {
-                NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
+                /*NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
                 
                 @try {
                         task_t task;
@@ -289,7 +291,7 @@
                         if (*perr == KERN_SUCCESS) {
 				if (0 == (flags & PGRAB_RDONLY))
 					(void)task_suspend(task);
-                                VMUSymbolicator* symbolicator = [VMUSymbolicator symbolicatorForTask:task];
+                                //VMUSymbolicator* symbolicator = [VMUSymbolicator symbolicatorForTask:task];
                                 
                                 if (symbolicator) {
                                         proc = calloc(sizeof(struct ps_prochandle), 1);
@@ -319,7 +321,7 @@
                         }
                 }
                 
-                [pool drain];
+                [pool drain];*/
         } else {
                 *perr = APPLE_PGRAB_UNSUPPORTED_FLAGS;
         }
@@ -356,9 +358,9 @@
  * We're ignoring most flags for now. They will eventually need to be honored.
  */
 void Prelease(struct ps_prochandle *P, int flags) {
-        NSCAssert(P != NULL, @"Should be a valid ps_prochandle");
+        //NSCAssert(P != NULL, @"Should be a valid ps_prochandle");
         
-        NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
+        //NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
 		
 		if (0 == flags) {
 			if (P->status.pr_flags & PR_KLC)
@@ -373,7 +375,7 @@
         mach_port_deallocate(mach_task_self(), P->task);
         P->task = MACH_PORT_NULL;
         
-		if (P->symbolicator && (P->symbolicator != P->prev_symbolicator))
+	/*	if (P->symbolicator && (P->symbolicator != P->prev_symbolicator))
 			[P->symbolicator release];
         P->symbolicator = nil;
 			
@@ -385,7 +387,7 @@
         [P->prmap_dictionary release];
         P->prmap_dictionary = nil;
         
-        [pool drain];
+        [pool drain];*/
         
         free(P);
 }
@@ -431,17 +433,17 @@
 }
 
 int pr_open(struct ps_prochandle *P, const char *foo, int bar, mode_t baz) {
-    NSLog(@"libProc.a UNIMPLEMENTED: pr_open()");
+    //NSLog(@"libProc.a UNIMPLEMENTED: pr_open()");
     return 0;
 }
 
 int pr_close(struct ps_prochandle *P, int foo) {
-    NSLog(@"libProc.a UNIMPLEMENTED: pr_close");
+    //NSLog(@"libProc.a UNIMPLEMENTED: pr_close");
     return 0;
 }
 
 int pr_ioctl(struct ps_prochandle *P, int foo, int bar, void *baz, size_t blah) {
-    NSLog(@"libProc.a UNIMPLEMENTED: pr_ioctl");
+    //NSLog(@"libProc.a UNIMPLEMENTED: pr_ioctl");
     return 0;
 }
 
@@ -470,12 +472,12 @@
 {
         int err = -1;
     
-        NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
+        //NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
         
-        VMUSymbol* symbol = nil;
+        //VMUSymbol* symbol = nil;
         
-        if (oname != NULL) {
-                VMUSymbolOwner* owner = symbolOwnerForName(P->symbolicator, [NSString stringWithUTF8String:oname]);
+        /*if (oname != NULL) {
+                //VMUSymbolOwner* owner = symbolOwnerForName(P->symbolicator, [NSString stringWithUTF8String:oname]);
                 NSArray* symbols = NULL;
                 if (_dtrace_mangled) {
                         symbols = [owner symbolsForMangledName:[NSString stringWithUTF8String:sname]];
@@ -504,7 +506,7 @@
                 err = 0;
         
         if (symbol && symp) {
-                VMURange addressRange = [symbol addressRange];
+                //VMURange addressRange = [symbol addressRange];
                                 
                 symp->st_name = 0;
                 symp->st_info = GELF_ST_INFO((STB_GLOBAL), (STT_FUNC));
@@ -518,7 +520,7 @@
                 sip->prs_lmid = LM_ID_BASE;
         }
         
-        [pool drain];
+        [pool drain];*/
         
         return err;
 }
@@ -552,16 +554,16 @@
 {
     int err = -1;
 
-    NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
+    //NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
 
-    VMUSymbol* symbol = [P->symbolicator symbolForAddress:addr];
+    //VMUSymbol* symbol = [P->symbolicator symbolForAddress:addr];
 
     // See comments in Ppltdest()
     // Filter out symbols we do not want to instrument
     // if ([symbol isDyldStub]) symbol = nil;
     // if (![symbol isFunction]) symbol = nil;
 
-    if (symbol) {
+    /*if (symbol) {
         if (_dtrace_mangled) {
             const char *mangledName = [[symbol mangledName] UTF8String];
             if (strlen(mangledName) >= 3 &&
@@ -578,7 +580,7 @@
         err = 0;
 
         if (symbolp) {
-            VMURange addressRange = [symbol addressRange];
+            //VMURange addressRange = [symbol addressRange];
 
             symbolp->st_name = 0;
             symbolp->st_info = GELF_ST_INFO((STB_GLOBAL), (STT_FUNC));
@@ -589,7 +591,7 @@
         }
 
         if (sip) {
-            VMUSymbolOwner* owner = [symbol owner];
+            //VMUSymbolOwner* owner = [symbol owner];
             sip->prs_name = (bufsize == 0 ? NULL : sym_name_buffer);
 
             if (owner) {
@@ -609,7 +611,7 @@
         }
     }
 
-    [pool drain];
+    [pool drain];*/
 
     return err;
 }
@@ -649,9 +651,9 @@
 int Pobject_iter(struct ps_prochandle *P, proc_map_f *func, void *cd) {
         int err = 0;
         
-        NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
+        //NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
         
-        for (VMUSymbolOwner* owner in [P->symbolicator symbolOwners]) {
+        /*for (VMUSymbolOwner* owner in [P->symbolicator symbolOwners]) {
                 if ([owner isCommpage]) continue; // <rdar://problem/4877551>
 	
                 prmap_t map;
@@ -676,9 +678,9 @@
                 
                 if ((err = func(cd, &map, name)) != 0)
                         break;
-        }
+        }*/
         
-        [pool drain];
+        //[pool drain];
         
         return err;
 }
@@ -686,7 +688,7 @@
 const prmap_t *Paddr_to_map(struct ps_prochandle *P, uint64_t addr) {
 	const prmap_t* map = NULL;
                 
-        NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
+        /*NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
         
         VMUSymbolOwner* owner = [P->symbolicator symbolOwnerForAddress:addr];
 	
@@ -709,7 +711,7 @@
                 map = [data bytes];
         }
 	
-	[pool drain];
+	[pool drain];*/
         
         return map;	
 }
@@ -756,11 +758,11 @@
         else if (cname == PR_OBJ_EXEC)
                 cname = "a.out";
         
-        NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
+        /*NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
         
         NSString* name = [NSString stringWithUTF8String:cname];
 
-        VMUSymbolOwner* owner = symbolOwnerForName(P->symbolicator, name);
+        //VMUSymbolOwner* owner = symbolOwnerForName(P->symbolicator, name);
   
         // <rdar://problem/4877551>
         if (owner && ![owner isCommpage]) {
@@ -781,7 +783,7 @@
                 map = [data bytes];
         }
         
-        [pool drain];
+        [pool drain];*/
         
         return map;
 }
@@ -794,7 +796,7 @@
 char *Pobjname(struct ps_prochandle *P, uint64_t addr, char *buffer, size_t bufsize) {
         char *err = NULL;
         
-        NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
+        /*NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
 
         VMUSymbolOwner* owner = [P->symbolicator symbolOwnerForAddress:addr];
         
@@ -803,7 +805,7 @@
                 err = buffer;
         }
         
-        [pool drain];
+        [pool drain];*/
         
         // ALWAYS! make certain buffer is null terminated
         buffer[bufsize-1] = 0;
@@ -826,7 +828,7 @@
 }
 
 // A helper category to crack "-[Class method]" into "Class" "-method"
-@interface VMUSymbol (dtrace)
+/*@interface VMUSymbol (dtrace)
 - (NSString*)dtraceClassName;
 - (NSString*)dtraceMethodName;
 @end
@@ -856,7 +858,7 @@
         return [NSString stringWithFormat:@"%c%@", (char)[temp characterAtIndex:0], [temp substringWithRange:NSMakeRange(r.location, ([temp length] - 1) - r.location)]];
 }
 
-@end
+@end*/
 
 /*
  * This is an Apple only proc method. It is used by the objc provider,
@@ -866,7 +868,7 @@
 int Pobjc_method_iter(struct ps_prochandle *P, proc_objc_f *func, void *cd) {
         int err = 0;
         
-        NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
+        /*NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
 
         for (VMUSymbolOwner* owner in [P->symbolicator symbolOwners]) {
                 for (VMUSymbol* symbol in [owner symbols]) {
@@ -890,12 +892,12 @@
                         }
                 }
                 
-                /* We need to propagate errors from the inner loop */
+                // We need to propagate errors from the inner loop 
                 if (err != 0)
                         break;
         }
         
-        [pool drain];
+        [pool drain];*/
         
         return err;
 }
@@ -920,7 +922,7 @@
 	if (which != PR_SYMTAB)
 		return err;
 
-	NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
+	/*NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
 
 	NSString* name = [NSString stringWithUTF8String:object_name];
 
@@ -964,7 +966,7 @@
 		err = -1;
 	}
 
-	[pool drain];
+	[pool drain];*/
 
 	return err;
 }
@@ -974,14 +976,14 @@
 }
 
 void Pmothball_syms(struct ps_prochandle *P) {
-	if (P->prev_symbolicator)
+	/*if (P->prev_symbolicator)
 		[P->prev_symbolicator release];
 	
-	P->prev_symbolicator = P->symbolicator;
+	P->prev_symbolicator = P->symbolicator;*/
 }
 	
 void Pupdate_syms(struct ps_prochandle *P) {	
-	NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
+	/*NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
 	
 	if (P->symbolicator && (P->symbolicator != P->prev_symbolicator))
 		[P->symbolicator release];
@@ -1008,7 +1010,7 @@
 		Prelease(P, PRELEASE_CLEAR);
 	}
 	
-	[pool drain];
+	[pool drain];*/
 }
 
 /*
@@ -1035,7 +1037,7 @@
 const char *Ppltdest(struct ps_prochandle *P, uint64_t addr) {
         const char* err = NULL;
         
-        NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
+        /*NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
         
         VMUSymbol* symbol = [P->symbolicator symbolForAddress:addr];
         
@@ -1043,7 +1045,7 @@
         if (symbol && ([symbol isDyldStub] || (![symbol isFunction]) || [[symbol owner] isCommpage]))
                 err = "Ppltdest is not implemented";
         
-        [pool drain];
+        [pool drain];*/
         
         return err;
 }
@@ -1300,6 +1302,6 @@
 //
 
 int Pctlfd(struct ps_prochandle *ignore) {
-    NSLog(@"libProc.a UNIMPLEMENTED: Pctlfd()");
+    //NSLog(@"libProc.a UNIMPLEMENTED: Pctlfd()");
     return 0;
 }
